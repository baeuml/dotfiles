" vim:fdm=marker

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Vundle Plugin Config {{{

" Call/setup Vundle {{{
filetype off " filetype needs to be off for vundle config
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" }}}

" -- let vundle manage itself
Bundle 'gmarik/vundle'

" -- autocompletion
"Bundle 'Valloric/YouCompleteMe'
"let g:ycm_confirm_extra_conf = 0 	" Don't ask if file should be loaded

" -- git wrapper
Bundle 'fugitive.vim'

" -- show buffers
"Bundle 'minibufexplorerpp'
"let g:miniBufExplorerMoreThanOne = 1

" -- c ifdef block highlighting
Bundle 'ifdef-highlighting'

" NERDTree options
Bundle 'scrooloose/nerdtree'
let NERDTreeIgnore = ['\~$', '\.pyc$', '\.o$']
nnoremap <leader>nt :NERDTree 
nnoremap <leader>nb :NERDTreeBookmark 
nnoremap <leader>nn :NERDTreeToggle<cr>
nnoremap <leader>nf :NERDTreeFind<cr>
"let NERDTreeQuitOnOpen = 1

" FuzzyFinder
" -- L9 is a FuzzyFinder dependency
Bundle 'L9'
Bundle 'FuzzyFinder'
nnoremap <C-p> :FuzzyFinderFile<CR> 

" Clang-complete
let g:clang_complete_auto = 1
let g:clang_complete_copen = 1
let g:clang_hl_errors = 1
let g:clang_periodic_quickfix = 0
let g:clang_snippets = 0
" g:clang_conceal_snippets:
let g:clang_exec = 'clang'
let g:clang_user_options = ''
let g:clang_auto_user_options = 'path, .clang_complete'
let g:clang_use_library = 1

" pydiction
Bundle 'Pydiction'
let g:pydiction_location = '~/.vim/after/ftplugin/pydiction/complete-dict'

" pyflakes
Bundle 'pyflakes.vim'
let g:pyflakes_use_quickfix = 0

" pep8
Bundle 'pep8'
let g:pep8_map='<leader>8'

" -- easy LaTeX editing
Bundle 'LaTeX-Suite-aka-Vim-LaTeX'
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'

" -- outlines
Bundle 'VOoM'
map     <F10>           :VoomToggle latex<CR>
let g:voom_tree_width=90

" -- check good writing style
Bundle 'davidbeckingsale/writegood.vim'
autocmd BufNewFile,BufRead *.tex             setlocal spell spelllang=en complete+=k dictionary+=/usr/share/dict/words iskeyword+=: sw=4 ts=4|call writegood#enable()

" -- slime
Bundle 'jpalardy/vim-slime.git'
let g:slime_target = "tmux"

" -- snippets
Bundle 'SirVer/ultisnips'

" javascript support
Bundle 'scrooloose/syntastic'

" -- airline
Bundle 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
let g:airline_theme='light'


" End vundle plugins config }}}


filetype plugin indent on

"set cpoptions=cesWy
set autoindent			" auto-indenting
set autowrite 			" save before i.e. :make is called
set nobackup			" don't keep backup files
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set cf                  " enable error files and error jumping
" set digraph			" Ermöglicht das Eingeben von Umlauten
set esckeys             " use arrow keys
set expandtab
set formatoptions=cqro
set guioptions-=T		" no toolbar in GUI
set guioptions-=r		" no scrollbar on the right
set guioptions-=b		" no scrollbar on the bottom
set hidden
set history=50			" keep 50 lines of command history
set incsearch           " enable incremental search
set ignorecase			" Ignore case while searching
" set iskeyword=@,48-57,_,192-255,-,.,@-@ " you can search for @ . _ and -
set lazyredraw			" während macros nicht refreshen
set list
set listchars=tab:\ \ ,trail:·	" show trailing characters
set laststatus=2		" always show status bar
set magic
set mousehide			" hide mouseptr while typing
set mouse=""			" have the mouse disabled all the time
set modelines=3         " allow local variables to be set in the first and last 3 lines
set nobackup            " don't make backups
set noerrorbells		" no anoying beeeps 
set nohls			    " don't highlight the last used search pattern
set nostartofline
set nosplitbelow		" new window always on top
set noinsertmode		" don't start vim in insert mode
set novisualbell        " don't beep
set nu				    " show line numbers
set nowrap
set path=.,~/,/usr/include
set pastetoggle=<F11>
set ruler			    " Show the cursor position all the time
set shiftwidth=4		" How many spaces are used for indent
set shortmess=atI		" shorten status bar msgs
set showcmd             " show partial commands in statusbar
set showmatch			" shortly jump to matching brace when typing closing brace
set showmode			" Show mode in statusbar
set scrolloff=3         " Always keep n lines visible above and below the cursor
set softtabstop=0		" disable softtab
set smartindent
set smarttab
set switchbuf=useopen   " Use existing windows when jumping to errors etc.
set tabstop=4			" how many spaces for a tab
set ttyscroll=999
set viminfo='20,"\50
set whichwrap=<,>,h,l
set wmh=0
set wrapmargin=0
set wildmenu            " nicer completion
"set wildmode=list:longest
set wildchar=<TAB>		" expands wildchars
set wildignore+=.hg,.git,.svn " Version control
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl " compiled spelling word lists
set wildignore+=*.sw? " Vim swap files
set wildignore+=*.DS_Store " OSX bullshit

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

" For all text files set 'textwidth' to 78 characters
" and disable autoindent, which otherwise would indent each line
" after every other line that begins with 'for'
autocmd FileType text setlocal textwidth=78

"" ==========================================================
"" Appearance
"" ==========================================================
set t_Co=256            " make use of 256 terminal colors
color summerfruit256
syntax on			    " syntax highlighting
set cul                 " highlight current line
hi CursorLine term=none cterm=none

if has("gui_running")
    set guioptions-=m   " no menu
    set guioptions-=L
    set guioptions-=t
    set guioptions-=T
    if has("gui_gtk2")
        set guifont=Monospace\ 8
    endif
else
    if &term =~ '^screen'
        set titlelen=15
        set titlestring=%t%(\ %m%)
        set title
        set t_ts=k
        set t_fs=\
        let &titleold = fnamemodify(&shell, ":t")
    endif
endif


"" ==========================================================
"" Statusline
"" ==========================================================

" show syntax highlighting debugging information in status line
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction

"set statusline=%1*[%02n]%*\ %(%M%R%H%)\ %*\Line=%l/%L\ Col=%02c\ %3*\ %t\ %*\ %{SyntaxItem()}\ %=%{Options()}\ %2*\ DEC=%03.3b\ HEX=%02.3B\ %*
"set statusline=[%02n]\ %(%M%R%H%)\ \Line=%l/%L\ Col=%02c\ \ %t\ \ %=%{Options()}\ \ DEC=%03.3b\ HEX=%02.3B\ 

fu! Options()
	let opt=""
	if &ai|   let opt=opt." ai"   |endif
	if &paste|let opt=opt." paste"|endif
	if &shiftwidth!=8|let opt=opt." sw=".&shiftwidth|endif
	return opt
endf

"" ==========================================================
"" Tab Completion and folds
"" ==========================================================
function! InsertTabWrapper()
      let col = col('.') - 1
      if !col || getline('.')[col - 1] !~ '\k'
          return "\<tab>"
      else
          return "\<c-p>"
      endif
endfunction

if has("autocmd")
	" autocmd BufNewFile,Bufread *.c,*.cc,*.cpp,*.h,*.hh,*.hpp,*.java,*.pl,*.php,*.py inoremap <tab> <c-r>=InsertTabWrapper()<cr>

    " automatically save and restore folds
    "au BufWinLeave *.c,*.cc,*.cpp,*.h,*.hh,*.hpp,*.java,*.pl,*.php,*.py mkview
    "au BufWinEnter *.c,*.cc,*.cpp,*.h,*.hh,*.hpp,*.java,*.pl,*.php,*.py silent loadview
    au BufNewFile,BufRead *.i set filetype=swig
    au BufNewFile,BufRead *.swg set filetype=swig 
    au BufNewFile,BufRead *.qml set filetype=qml 
endif

"" ==========================================================
"" Key bindings
"" ==========================================================

" Set leader to something more comfortable
let mapleader=","

" Disable arrow keys and navigation keys
nnoremap <up>       <nop>
nnoremap <down>     <nop>
nnoremap <left>     <nop>
nnoremap <right>    <nop>
nnoremap <pageup>   <nop>
nnoremap <pagedown> <nop>
nnoremap <home>     <nop>
nnoremap <end>      <nop>
nnoremap <insert>   <nop>
nnoremap <delete>   <nop>
inoremap <up>       <nop>
inoremap <down>     <nop>
inoremap <left>     <nop>
inoremap <right>    <nop>
inoremap <pageup>   <nop>
inoremap <pagedown> <nop>
inoremap <home>     <nop>
inoremap <end>      <nop>
inoremap <insert>   <nop>
inoremap <delete>   <nop>
vnoremap <up>       <nop>
vnoremap <down>     <nop>
vnoremap <left>     <nop>
vnoremap <right>    <nop>
vnoremap <pageup>   <nop>
vnoremap <pagedown> <nop>
vnoremap <home>     <nop>
vnoremap <end>      <nop>
vnoremap <insert>   <nop>
vnoremap <delete>   <nop>

" less keystrokes for saving
nnoremap ; :

" move more natural in wrapped lines
nnoremap j gj
nnoremap k gk

" Disable F1 for help
inoremap <f1> <nop>
nnoremap <f1> <nop>
vnoremap <f1> <nop>

" split window resizing
nmap <C-Up> <C-W>-<C-W>-
nmap <C-Down> <C-W>+<C-W>+
nmap <C-Left> <C-W><<C-W><
nmap <C-Right> <C-W>><C-W>>

" buffer navigation
nnoremap <silent> <C-l> :bn<CR>
nnoremap <silent> <C-h> :bp<CR>

"" insert timestamp at point
nmap <F3> a<C-R>=strftime("(%Y-%m-%d %a %H:%M)")<CR><Esc>
imap <F3> <C-R>=strftime("(%Y-%m-%d %a %H:%M)")<CR>



